id: e4e63bf1-e3bf-46e3-9781-5a45d45bf80a
name: Highlight Hashes
function: VIEW_FILTER
location: PROXY_HTTP_HISTORY
source: |+
  if (!requestResponse.hasResponse()){
  	return false;
  }
  
  var response_body = requestResponse.response().bodyToString();
  
  boolean manualColorHighlightEnabled = true;
  boolean found_hash = false;

  // Regex for all common password hashes one may find during a web application test  
  String regex ="['\"]?\\s*(?:\\$argon2(id|i|d)?\\$v=\\d+\\$[a-z0-9=,]+\\$[A-Za-z0-9+/=]+\\$[A-Za-z0-9+/=]+|\\$2[abxyz]?\\$\\d{1,2}\\$[./A-Za-z0-9]{53,}|pbkdf2_[a-z0-9]+\\$\\d+\\$[A-Za-z0-9+/=]+\\$[A-Za-z0-9+/=]+|\\$(1|5|6)\\$[./A-Za-z0-9]{1,16}\\$[./A-Za-z0-9]{22,}|\\$P\\$[./A-Za-z0-9]{31}|[a-fA-F0-9]{128}|[a-fA-F0-9]{96}|[a-fA-F0-9]{64}|[a-fA-F0-9]{40}|[a-fA-F0-9]{32})\\s*['\"]?";
  
  Pattern hash_patterns = Pattern.compile(regex);
  
  Matcher hash_matcher = hash_patterns.matcher(response_body);
  
  var annotate = requestResponse.annotations();
  String hashes = "Potential hash identified: ";
  
  while(hash_matcher.find()){
      found_hash = true;
      hashes += hash_matcher.group()+"";
  }
  
  if (found_hash){
      annotate.setHighlightColor(HighlightColor.BLUE);
      
      if(!annotate.hasNotes()){
      	annotate.setNotes(hashes);
      }
      else if(annotate.hasNotes() && !annotate.notes().contains(hashes)){
          annotate.setNotes(annotate.notes() + hashes);
      }
  }
  return true;
